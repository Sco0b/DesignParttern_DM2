/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.tetras;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;


import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Map;

class ServeurWebTest {

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;

    @BeforeEach
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
    }

    @AfterEach
    public void restoreStreams() {
        System.setOut(originalOut);
    }

    @Test
    public void testAfficher() {
        //
        Url myUrl = new Url("/besturl");    
        Map<String, String> headers = new HashMap<String, String>();
        headers.put("key1", "value1");
        Header myHeader = new Header(headers);
        Body myBody = new Body("best winter body");
        //
        RequeteHTTP requete = new RequeteHTTP(myUrl, myHeader, myBody);
        requete.afficher();
        //
        StringWriter out = new StringWriter();
        PrintWriter writer = new PrintWriter(out);
        writer.println("/besturl");
        writer.println("key1:value1");
        writer.println("best winter body");
        //
        assertEquals(out.toString(), outContent.toString());
    }

    
    @Test
    public void testRetours() {
        //
        Url myUrl = new Url("/besturl");
        Url evilUrl = new Url("/evilurl");
    
        Map<String, String> headers = new HashMap<String, String>();
        headers.put("key1", "value1");
        Header myHeader = new Header(headers);
    
        Body myBody = new Body("Best winter body");
        //
        RequeteHTTP requete = new RequeteHTTP(myUrl, myHeader, myBody);
        RequeteHTTP requeteNull = null;
        RequeteHTTP requeteEvil = new RequeteHTTP(evilUrl, myHeader, myBody);
        
        ServeurWebBase serveurBase = new ServeurWebBase();
        ServeurWebWithEvil serveur = new ServeurWebWithEvil(serveurBase);

        assertEquals(200, serveur.repondre(requete));
        assertEquals(500, serveur.repondre(requeteNull));
        assertEquals(403, serveur.repondre(requeteEvil));        
    }
}
